################################################################################
# BEGIN horrible, legacy, pre-config args
################################################################################

MODULE:com.google.code.gson:gson:2.8.2
MODULE:com.google.guava:guava:24.0-jre
MODULE:junit:junit:4.12
MODULE:log4j:apache-log4j-extras:1.2.17
MODULE:org.apache.commons:commons-lang3:3.7
MODULE:org.apache.httpcomponents:httpclient:4.5.5
MODULE:org.apache.ivy:ivy:2.4.0
MODULE:org.apache.maven:maven-artifact:3.5.3
MODULE:org.codehaus.groovy:groovy:3.0.9
MODULE:org.objenesis:objenesis:3.2
MODULE:org.ow2.asm:asm:9.2
MODULE:org.slf4j:slf4j-log4j12:1.7.25

# older jaxens have a circular dependency, pulled in transitively by groovy,
# try to fix that...
MODULE:jaxen:jaxen:1.2.0
# groovy also pulls in ivy, which is huge and also WTF
REMOVE:org.codehaus.groovy:groovy:*,org.apache.ivy:ivy:*
# some of groovy's dependencies try to pull in groovy-all.  lol.
REMOVE:*:*:*,org.codehaus.groovy:groovy-all:*

# these two conflict, I think javax.servlet is more correct?
REWRITE:*:*:*,org.apache.felix:javax.servlet:*,javax.servlet:servlet-api:0

# Apparently missing dependencies.  It's unclear which of above modules pulled
# in each of but they sure as hell don't link check without them.
ADD:net.java.dev.jna:platform:*,net.java.dev.jna:jna:0
#ADD:xalan:xalan:*,org.apache.bcel:bcel:6.2

# Rather than include this and fight all of its transitive shit we break it
REMOVE:commons-logging:commons-logging:*,avalon-framework:avalon-framework:*
LINK_CHECKER_ARGS:mc.commons.logging.commons.logging,--whitelistFrom org/apache/commons/logging/impl/AvalonLogger

# Stupid-ass renames.  Note magic "0" version is never imported and always
# loses so we end up with whatever the rest of the import specifies.
REWRITE:*:*:*,ant:ant-launcher:*,org.apache.ant:ant-launcher:0
REWRITE:*:*:*,ant:ant:*,org.apache.ant:ant:0
REWRITE:*:*:*,xerces:xerces-impl:*,xerces:xercesImpl:0

# Slf4j's static binding is a catastrophe from a safety perspective.  Their API
# jar references these and expects some other jar on the classpath to provide
# an "implementation" of these classes.  Probably.  We let them go and whatever
# happens at runtime is what you get.
LINK_CHECKER_ARGS:mc.org.slf4j.slf4j.api,--whitelistTo org/slf4j/impl/StaticLoggerBinder
LINK_CHECKER_ARGS:mc.org.slf4j.slf4j.api,--whitelistTo org/slf4j/impl/StaticMDCBinder
LINK_CHECKER_ARGS:mc.org.slf4j.slf4j.api,--whitelistTo org/slf4j/impl/StaticMarkerBinder

# Looks like test garbage.
LINK_CHECKER_ARGS:mc.org.bouncycastle.bcprov.jdk14,--whitelistFrom org/bouncycastle/util/AllTests
LINK_CHECKER_ARGS:mc.org.bouncycastle.bcprov.jdk14,--whitelistFrom org/bouncycastle/util/IPTest

# Various as-of-yet undocumented kinds of special...
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/BaseXPath
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/JaxenException
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/dom4j/DocumentNavigator
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/exml/AttributesIterator
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/exml/ChildrenIterator
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/exml/DocumentNavigator
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/exml/ElementsIterator
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/exml/Namespace
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/exml/NamespaceIterator
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/expr/DefaultStep
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/jdom/DocumentNavigator
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/jdom/XPathNamespace
LINK_CHECKER_ARGS:mc.jaxen.jaxen,--whitelistFrom org/jaxen/pattern/PatternParser
LINK_CHECKER_ARGS:mc.logkit.logkit,--whitelistFrom org/apache/log/format/AvalonFormatter
LINK_CHECKER_ARGS:mc.logkit.logkit,--whitelistFrom org/apache/log/output/ServletOutputLogTarget
LINK_CHECKER_ARGS:mc.logkit.logkit,--whitelistFrom org/apache/log/output/jms/JMSQueueTarget
LINK_CHECKER_ARGS:mc.logkit.logkit,--whitelistFrom org/apache/log/output/jms/JMSTopicTarget
LINK_CHECKER_ARGS:mc.logkit.logkit,--whitelistFrom org/apache/log/output/jms/ObjectMessageBuilder
LINK_CHECKER_ARGS:mc.logkit.logkit,--whitelistFrom org/apache/log/output/jms/TextMessageBuilder

################################################################################
# END horrible, legacy, pre-config args
################################################################################

# Add new modules below here and generally keep their wacky configuration next
# to them.

# Altering dependencies is superiour to link checker whitelisting since e.g.
# missing dependencies can actually be relevant to the code or mistaken extra
# dependencies can pull in unneeded garbage.

# Link checker examples can be found above if you must.

MODULE:org.commonjava.googlecode.markdown4j:markdown4j:2.2-cj-1.1

# Alas, JDK9 removed java.awt.Component.getPeer (called via Window type in JNA
# platform apparently).  Either way we don't give two craps about swing code.

LINK_CHECKER_ARGS:mc.net.java.dev.jna.platform,--whitelistTo java/awt/Window

# Arggh, this declares no dependencies but is broken?  I think one is only
# supposed to use the annotations or something?

LINK_CHECKER_ARGS:mc.org.checkerframework.checker.compat.qual,--whitelistFrom afu/org/checkerframework/checker/formatter
LINK_CHECKER_ARGS:mc.org.checkerframework.checker.compat.qual,--whitelistFrom org/checkerframework/checker/formatter

# As of JDK14, Pack200 is removed from the JDK.  There is no new version of ivy
# to work around this, but almost all ivy functionality works without it.
LINK_CHECKER_ARGS:mc.org.apache.ivy.ivy,--whitelistTo java/util/jar/Pack200
LINK_CHECKER_ARGS:mc.org.apache.ivy.ivy,--whitelistTo java/util/jar/Pack200\$Unpacker

# fix some transitive dependencies under groovy, this one has a POM that doesn't even parse
REMOVE:*:*:*,jdom:jdom:b10
# and, on the subject of jdom, there was apparently a rename also?
REWRITE:*:*:*,jdom:jdom:*,org.jdom:jdom:0

# This is a cycle, you can't even make this shit up
REMOVE:*:*:*,jaxen:jaxen:*

# commons-beanutils was renamed to commons-beanutils-core from 1.7.0 to 1.8.0
REWRITE:*:*:*,commons-beanutils:commons-beanutils:*,commons-beanutils:commons-beanutils-core:0

# maven model 2.2.1 has classes which conflict with ant-tasks 2.1.3 so lock into 2.2.0
REWRITE:*:*:*,org.apache.maven:maven-model:2.2.1,org.apache.maven:maven-model:2.2.0
#MODULE:org.apache.maven:maven-model:2.2.0

# Thanks to the disasterous transitive closure of dependecnies brought in by groovy 3.0.9, we see a three-way class conflict:
# Classfile collision at org/xmlpull/v1/XmlPullParser.class: {3553297119=[xmlpull-1.1.3.1.jar, kxml2-min-2.3.0.jar, xpp3-1.1.3.3.jar], 2661163761=[xpp3_min-1.1.4c.jar]}
# And, later:
# Classfile collision at org/xmlpull/v1/XmlPullParser.class: {3553297119=[xpp3-1.1.3.3.jar], 2661163761=[xpp3_min-1.1.4c.jar]}
# with the exception of org/kxml2/io/KXmlParser.class, xpp3 is a full superset of those other two jars, so we can rewrite the dep
REWRITE:*:*:*,xmlpull:xmlpull:*,xpp3:xpp3:0
REWRITE:*:*:*,net.sf.kxml:kxml2-min:*,xpp3:xpp3:0
REWRITE:*:*:*,xpp3:xpp3_min:*,xpp3:xpp3:0

# Classfile collision at org/w3c/dom/Element.class: {1482289105=[xmlParserAPIs-2.6.2.jar], 618287543=[xml-apis-1.4.01.jar]}
# xml-apis appears to be mostly a superset, so we will rewrite:
REWRITE:*:*:*,xerces:xmlParserAPIs:*,xml-apis:xml-apis:0

# Classfile collision at javax/xml/stream/FactoryFinder.class: {3982995493=[xml-apis-1.4.01.jar], 366857991=[stax-api-1.0.1.jar]}
# xml-apis is a superset of stax-api
REWRITE:*:*:*,stax:stax-api:*,xml-apis:xml-apis:0

# Classfile collision at org/xml/sax/helpers/XMLReaderFactory.class: {123766436=[pull-parser-2.jar], 995559851=[xml-apis-1.4.01.jar]}
# xml-apis is superset of pull-parser-2... *except* for the org.gjt.xpp package.  Hopefully we don't need that
REWRITE:*:*:*,pull-parser:pull-parser:*,xml-apis:xml-apis:0

# Classfile collision at org/w3c/dom/UserDataHandler.class: {938959678=[xml-apis-1.4.01.jar], 3486089072=[xom-1.1.jar]}
# xml-apis is a superset except for package nu.xom and org.jaxen.  *sigh*
REWRITE:*:*:*,xom:xom:*,xml-apis:xml-apis:0

# Classfile collision at javax/xml/XMLConstants.class: {3218073228=[xml-apis-1.4.01.jar], 3250919068=[jaxme-api-0.3.jar]}
# in this comparison, xml-apis is only missing javax.xml.bind (and only some of it).
REWRITE:*:*:*,jaxme:jaxme-api:*,xml-apis:xml-apis:0

